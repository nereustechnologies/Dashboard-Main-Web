generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String
  adminId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tests     Test[]
  admin     User?    @relation("AdminToTesters", fields: [adminId], references: [id])
  testers   User[]   @relation("AdminToTesters")
}

model Customer {
  id                 String              @id @default(uuid())
  name               String
  age                Int
  gender             String
  height             Float
  weight             Float
  sleepLevels        Float
  activityLevel      String
  calorieIntake      Int
  mood               String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  UniqueId           String?
  movementSignature  MovementSignature?
  sectionEvaluations SectionEvaluation[]
  tests              Test[]
  ScoresToBeat        ScoresToBeat[]
  trainingPurposes   TrainingPurpose[]
}

model Test {
  id         String      @id @default(uuid())
  date       DateTime    @default(now())
  status     String
  customerId String
  testerId   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  exercises  Exercise[]
  customer   Customer    @relation(fields: [customerId], references: [id])
  tester     User        @relation(fields: [testerId], references: [id])
  ratings    TestRating?
}

model Exercise {
  id         String              @id @default(uuid())
  name       String
  category   String
  completed  Boolean             @default(false)
  testId     String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  test       Test                @relation(fields: [testId], references: [id])
  assetFiles ExerciseAssetFile[]
}

model TestRating {
  id               String   @id @default(uuid())
  overall          Int
  mobility         Int
  strength         Int
  endurance        Int
  observation      String?
  RPE              Int
  FeltAfterWorkOut String
  testId           String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  test             Test     @relation(fields: [testId], references: [id])
}

model ExerciseAssetFile {
  id              String   @id @default(uuid())
  exerciseId      String
  fileName        String
  fileType        String
  s3PathRaw       String
  s3PathProcessed String?
  status          String   @default("uploaded")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  analysisResults Json?
  exercise        Exercise @relation(fields: [exerciseId], references: [id])

  @@index([exerciseId])
}

/// --------------------------------------------------------------------
/// 2. SECTION-EVALUATION  (Mobility / Strength / Endurance)
/// – one row per section per customer
/// --------------------------------------------------------------------
model SectionEvaluation {
  id         String      @id @default(uuid())
  customerId String
  section    EvalSection
  dropdowns  Json
  comments   Json
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  textLabels Json?
  customer   Customer    @relation(fields: [customerId], references: [id])

  @@unique([customerId, section])
}

/// --------------------------------------------------------------------
/// 3. TRAINING-WITH-PURPOSE  (3 × 3 suggestions)
/// – one row per suggestion; each category owns its own Save button
/// --------------------------------------------------------------------
model TrainingPurpose {
  id         String           @id @default(uuid())
  customerId String
  category   TrainingCategory
  slot       Int
  title      String
  paragraph  String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  customer   Customer         @relation(fields: [customerId], references: [id])

  @@unique([customerId, category, slot])
}
model ScoresToBeat {
  id          String    @id @default(uuid())
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id])

  title       String
  current     Int
  best        Int

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([customerId, title])  // ensures one score entry per title per customer
}


/// --------------------------------------------------------------------
/// 4. MOVEMENT-SIGNATURE  (identity + 1-10 rating bar)
/// – one row per customer
/// --------------------------------------------------------------------
model MovementSignature {
  id              String   @id @default(uuid())
  customerId      String   @unique
  identity        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  enduranceRating Int      @default(5)
  mobilityRating  Int      @default(5)
  strengthRating  Int      @default(5)
  customer        Customer @relation(fields: [customerId], references: [id])
}

model Temp {
  id               String   @id @default(uuid())
  fullName         String
  age              Int
  gender           Gender
  email            String
  whatsapp         String
  SessionNo        Int
  medicalHistory   String?
  whyMove          String
  fitnessGoal      String
  consentAgreement Boolean  @default(true)
  ageConfirmation  Boolean
  paymentStatus    String
  timeSlotId       String
  createdAt        DateTime @default(now())
  timeSlot         TimeSlot @relation("TimeSlotToTemp", fields: [timeSlotId], references: [id])
}
model EmailLog {
  id          String   @id @default(uuid())
  clientId    String
  emailType   EmailType
  subject     String
  status      String   // e.g., SENT, FAILED
  sentVia     String   // e.g., EMAIL, WHATSAPP
  sessionDate DateTime
  createdAt   DateTime @default(now())

  client      Client   @relation(fields: [clientId], references: [id])
}

enum EmailType {
  CONFIRMATION
  REMINDER
  POST_SESSION
  REPORT
}

model Client {
  id             String    @id @default(uuid())
  fullName       String
  age            Int
  gender         Gender
  email          String
  whatsapp       String
  medicalHistory String?
  whyMove        String
  fitnessGoal    String
  uniqueId       String
  createdAt      DateTime  @default(now())
  Booking        Booking[]
   EmailLog       EmailLog[]
}

model SlotDate {
  id         String     @id @default(uuid())
  date       DateTime
  locationId String
  location   Location   @relation(fields: [locationId], references: [id])
  timeSlots  TimeSlot[]
}

model Location {
  id      String     @id @default(uuid())
  name    String
  address String
  link    String?
  dates   SlotDate[]
}

model TimeSlot {
  id         String    @id @default(uuid())
  startTime  DateTime
  endTime    DateTime
  count      Int
  slotDateId String
  bookings   Booking[]
  temps      Temp[]    @relation("TimeSlotToTemp")
  slotDate   SlotDate  @relation(fields: [slotDateId], references: [id])
}

model Booking {
  id               String         @id @default(uuid())
  orderId          String
  clientId         String
  clientSessionNo  Int
  consentAgreement Boolean        @default(true)
  ageConfirmation  Boolean
  paymentId        String
  paymentStatus    PaymentStatus? @default(PENDING)
  invoiceNumber    Int            @default(autoincrement())
  timeSlotId       String
  createdAt        DateTime       @default(now())
  client           Client         @relation(fields: [clientId], references: [id])
  timeSlot         TimeSlot       @relation(fields: [timeSlotId], references: [id])
}

model Config {
  id        String   @id @default(uuid())
  price     Int
  updatedAt DateTime @updatedAt
}

/// --------------------------------------------------------------------
/// 1. ENUMS – keep the string literals out of tables for consistency
/// --------------------------------------------------------------------
enum EvalSection {
  mobility
  strength
  endurance
}

enum TrainingCategory {
  expand
  improve
  injury
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUND
}

